// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/google/uuid"
	"github.com/pei223/hook-scheduler/pkg/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Hook is an object representing the database table.
type Hook struct {
	HookID      uuid.UUID   `boil:"hook_id" json:"hook_id" toml:"hook_id" yaml:"hook_id"`
	DisplayName string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	URL         string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Method      string      `boil:"method" json:"method" toml:"method" yaml:"method"`
	Body        types.JSONB `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	Headers     types.JSONB `boil:"headers" json:"headers,omitempty" toml:"headers" yaml:"headers,omitempty"`

	R *hookR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hookL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HookColumns = struct {
	HookID      string
	DisplayName string
	Description string
	URL         string
	Method      string
	Body        string
	Headers     string
}{
	HookID:      "hook_id",
	DisplayName: "display_name",
	Description: "description",
	URL:         "url",
	Method:      "method",
	Body:        "body",
	Headers:     "headers",
}

var HookTableColumns = struct {
	HookID      string
	DisplayName string
	Description string
	URL         string
	Method      string
	Body        string
	Headers     string
}{
	HookID:      "hooks.hook_id",
	DisplayName: "hooks.display_name",
	Description: "hooks.description",
	URL:         "hooks.url",
	Method:      "hooks.method",
	Body:        "hooks.body",
	Headers:     "hooks.headers",
}

// Generated where

var HookWhere = struct {
	HookID      whereHelperuuid_UUID
	DisplayName whereHelperstring
	Description whereHelperstring
	URL         whereHelperstring
	Method      whereHelperstring
	Body        whereHelpertypes_JSONB
	Headers     whereHelpertypes_JSONB
}{
	HookID:      whereHelperuuid_UUID{field: "\"hooks\".\"hook_id\""},
	DisplayName: whereHelperstring{field: "\"hooks\".\"display_name\""},
	Description: whereHelperstring{field: "\"hooks\".\"description\""},
	URL:         whereHelperstring{field: "\"hooks\".\"url\""},
	Method:      whereHelperstring{field: "\"hooks\".\"method\""},
	Body:        whereHelpertypes_JSONB{field: "\"hooks\".\"body\""},
	Headers:     whereHelpertypes_JSONB{field: "\"hooks\".\"headers\""},
}

// HookRels is where relationship names are stored.
var HookRels = struct {
	HookSchedules string
}{
	HookSchedules: "HookSchedules",
}

// hookR is where relationships are stored.
type hookR struct {
	HookSchedules HookScheduleSlice `boil:"HookSchedules" json:"HookSchedules" toml:"HookSchedules" yaml:"HookSchedules"`
}

// NewStruct creates a new relationship struct
func (*hookR) NewStruct() *hookR {
	return &hookR{}
}

func (r *hookR) GetHookSchedules() HookScheduleSlice {
	if r == nil {
		return nil
	}
	return r.HookSchedules
}

// hookL is where Load methods for each relationship are stored.
type hookL struct{}

var (
	hookAllColumns            = []string{"hook_id", "display_name", "description", "url", "method", "body", "headers"}
	hookColumnsWithoutDefault = []string{"hook_id", "display_name", "description", "url", "method"}
	hookColumnsWithDefault    = []string{"body", "headers"}
	hookPrimaryKeyColumns     = []string{"hook_id"}
	hookGeneratedColumns      = []string{}
)

type (
	// HookSlice is an alias for a slice of pointers to Hook.
	// This should almost always be used instead of []Hook.
	HookSlice []*Hook
	// HookHook is the signature for custom Hook hook methods
	HookHook func(context.Context, boil.ContextExecutor, *Hook) error

	hookQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hookType                 = reflect.TypeOf(&Hook{})
	hookMapping              = queries.MakeStructMapping(hookType)
	hookPrimaryKeyMapping, _ = queries.BindMapping(hookType, hookMapping, hookPrimaryKeyColumns)
	hookInsertCacheMut       sync.RWMutex
	hookInsertCache          = make(map[string]insertCache)
	hookUpdateCacheMut       sync.RWMutex
	hookUpdateCache          = make(map[string]updateCache)
	hookUpsertCacheMut       sync.RWMutex
	hookUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hookAfterSelectMu sync.Mutex
var hookAfterSelectHooks []HookHook

var hookBeforeInsertMu sync.Mutex
var hookBeforeInsertHooks []HookHook
var hookAfterInsertMu sync.Mutex
var hookAfterInsertHooks []HookHook

var hookBeforeUpdateMu sync.Mutex
var hookBeforeUpdateHooks []HookHook
var hookAfterUpdateMu sync.Mutex
var hookAfterUpdateHooks []HookHook

var hookBeforeDeleteMu sync.Mutex
var hookBeforeDeleteHooks []HookHook
var hookAfterDeleteMu sync.Mutex
var hookAfterDeleteHooks []HookHook

var hookBeforeUpsertMu sync.Mutex
var hookBeforeUpsertHooks []HookHook
var hookAfterUpsertMu sync.Mutex
var hookAfterUpsertHooks []HookHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Hook) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Hook) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Hook) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Hook) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Hook) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Hook) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Hook) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Hook) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Hook) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHookHook registers your hook function for all future operations.
func AddHookHook(hookPoint boil.HookPoint, hookHook HookHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hookAfterSelectMu.Lock()
		hookAfterSelectHooks = append(hookAfterSelectHooks, hookHook)
		hookAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		hookBeforeInsertMu.Lock()
		hookBeforeInsertHooks = append(hookBeforeInsertHooks, hookHook)
		hookBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		hookAfterInsertMu.Lock()
		hookAfterInsertHooks = append(hookAfterInsertHooks, hookHook)
		hookAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		hookBeforeUpdateMu.Lock()
		hookBeforeUpdateHooks = append(hookBeforeUpdateHooks, hookHook)
		hookBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		hookAfterUpdateMu.Lock()
		hookAfterUpdateHooks = append(hookAfterUpdateHooks, hookHook)
		hookAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		hookBeforeDeleteMu.Lock()
		hookBeforeDeleteHooks = append(hookBeforeDeleteHooks, hookHook)
		hookBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		hookAfterDeleteMu.Lock()
		hookAfterDeleteHooks = append(hookAfterDeleteHooks, hookHook)
		hookAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		hookBeforeUpsertMu.Lock()
		hookBeforeUpsertHooks = append(hookBeforeUpsertHooks, hookHook)
		hookBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		hookAfterUpsertMu.Lock()
		hookAfterUpsertHooks = append(hookAfterUpsertHooks, hookHook)
		hookAfterUpsertMu.Unlock()
	}
}

// One returns a single hook record from the query.
func (q hookQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Hook, error) {
	o := &Hook{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hooks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Hook records from the query.
func (q hookQuery) All(ctx context.Context, exec boil.ContextExecutor) (HookSlice, error) {
	var o []*Hook

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Hook slice")
	}

	if len(hookAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Hook records in the query.
func (q hookQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hooks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hookQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hooks exists")
	}

	return count > 0, nil
}

// HookSchedules retrieves all the hook_schedule's HookSchedules with an executor.
func (o *Hook) HookSchedules(mods ...qm.QueryMod) hookScheduleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hook_schedules\".\"hook_id\"=?", o.HookID),
	)

	return HookSchedules(queryMods...)
}

// LoadHookSchedules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hookL) LoadHookSchedules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHook interface{}, mods queries.Applicator) error {
	var slice []*Hook
	var object *Hook

	if singular {
		var ok bool
		object, ok = maybeHook.(*Hook)
		if !ok {
			object = new(Hook)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHook))
			}
		}
	} else {
		s, ok := maybeHook.(*[]*Hook)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHook))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hookR{}
		}
		args[object.HookID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hookR{}
			}
			args[obj.HookID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`hook_schedules`),
		qm.WhereIn(`hook_schedules.hook_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hook_schedules")
	}

	var resultSlice []*HookSchedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hook_schedules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hook_schedules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hook_schedules")
	}

	if len(hookScheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HookSchedules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hookScheduleR{}
			}
			foreign.R.Hook = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.HookID, foreign.HookID) {
				local.R.HookSchedules = append(local.R.HookSchedules, foreign)
				if foreign.R == nil {
					foreign.R = &hookScheduleR{}
				}
				foreign.R.Hook = local
				break
			}
		}
	}

	return nil
}

// AddHookSchedules adds the given related objects to the existing relationships
// of the hook, optionally inserting them as new records.
// Appends related to o.R.HookSchedules.
// Sets related.R.Hook appropriately.
func (o *Hook) AddHookSchedules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HookSchedule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HookID, o.HookID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hook_schedules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hook_id"}),
				strmangle.WhereClause("\"", "\"", 2, hookSchedulePrimaryKeyColumns),
			)
			values := []interface{}{o.HookID, rel.HookScheduleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HookID, o.HookID)
		}
	}

	if o.R == nil {
		o.R = &hookR{
			HookSchedules: related,
		}
	} else {
		o.R.HookSchedules = append(o.R.HookSchedules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hookScheduleR{
				Hook: o,
			}
		} else {
			rel.R.Hook = o
		}
	}
	return nil
}

// Hooks retrieves all the records using an executor.
func Hooks(mods ...qm.QueryMod) hookQuery {
	mods = append(mods, qm.From("\"hooks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hooks\".*"})
	}

	return hookQuery{q}
}

// FindHook retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHook(ctx context.Context, exec boil.ContextExecutor, hookID uuid.UUID, selectCols ...string) (*Hook, error) {
	hookObj := &Hook{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hooks\" where \"hook_id\"=$1", sel,
	)

	q := queries.Raw(query, hookID)

	err := q.Bind(ctx, exec, hookObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hooks")
	}

	if err = hookObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hookObj, err
	}

	return hookObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Hook) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hooks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hookColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hookInsertCacheMut.RLock()
	cache, cached := hookInsertCache[key]
	hookInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hookAllColumns,
			hookColumnsWithDefault,
			hookColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hookType, hookMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hookType, hookMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hooks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hooks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hooks")
	}

	if !cached {
		hookInsertCacheMut.Lock()
		hookInsertCache[key] = cache
		hookInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Hook.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Hook) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hookUpdateCacheMut.RLock()
	cache, cached := hookUpdateCache[key]
	hookUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hookAllColumns,
			hookPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hooks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hooks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hookPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hookType, hookMapping, append(wl, hookPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hooks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hooks")
	}

	if !cached {
		hookUpdateCacheMut.Lock()
		hookUpdateCache[key] = cache
		hookUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hookQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hooks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HookSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hooks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hookPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hook")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Hook) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no hooks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hookColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hookUpsertCacheMut.RLock()
	cache, cached := hookUpsertCache[key]
	hookUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			hookAllColumns,
			hookColumnsWithDefault,
			hookColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hookAllColumns,
			hookPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hooks, could not build update column list")
		}

		ret := strmangle.SetComplement(hookAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(hookPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert hooks, could not build conflict column list")
			}

			conflict = make([]string, len(hookPrimaryKeyColumns))
			copy(conflict, hookPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hooks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(hookType, hookMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hookType, hookMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hooks")
	}

	if !cached {
		hookUpsertCacheMut.Lock()
		hookUpsertCache[key] = cache
		hookUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Hook record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Hook) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Hook provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hookPrimaryKeyMapping)
	sql := "DELETE FROM \"hooks\" WHERE \"hook_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hooks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hookQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hookQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hooks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HookSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hookBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hooks\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, hookPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hooks")
	}

	if len(hookAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Hook) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHook(ctx, exec, o.HookID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HookSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HookSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hooks\".* FROM \"hooks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hookPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HookSlice")
	}

	*o = slice

	return nil
}

// HookExists checks if the Hook row exists.
func HookExists(ctx context.Context, exec boil.ContextExecutor, hookID uuid.UUID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hooks\" where \"hook_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hookID)
	}
	row := exec.QueryRowContext(ctx, sql, hookID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hooks exists")
	}

	return exists, nil
}

// Exists checks if the Hook row exists.
func (o *Hook) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HookExists(ctx, exec, o.HookID)
}
