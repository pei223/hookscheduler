// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/google/uuid"
	"github.com/pei223/hook-scheduler/pkg/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HookResult is an object representing the database table.
type HookResult struct {
	HookHistoryID   uuid.UUID   `boil:"hook_history_id" json:"hook_history_id" toml:"hook_history_id" yaml:"hook_history_id"`
	HTTPStatusCode  int         `boil:"http_status_code" json:"http_status_code" toml:"http_status_code" yaml:"http_status_code"`
	ResponseBody    types.JSONB `boil:"response_body" json:"response_body,omitempty" toml:"response_body" yaml:"response_body,omitempty"`
	ResponseHeaders types.JSONB `boil:"response_headers" json:"response_headers,omitempty" toml:"response_headers" yaml:"response_headers,omitempty"`

	R *hookResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hookResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HookResultColumns = struct {
	HookHistoryID   string
	HTTPStatusCode  string
	ResponseBody    string
	ResponseHeaders string
}{
	HookHistoryID:   "hook_history_id",
	HTTPStatusCode:  "http_status_code",
	ResponseBody:    "response_body",
	ResponseHeaders: "response_headers",
}

var HookResultTableColumns = struct {
	HookHistoryID   string
	HTTPStatusCode  string
	ResponseBody    string
	ResponseHeaders string
}{
	HookHistoryID:   "hook_results.hook_history_id",
	HTTPStatusCode:  "hook_results.http_status_code",
	ResponseBody:    "hook_results.response_body",
	ResponseHeaders: "hook_results.response_headers",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var HookResultWhere = struct {
	HookHistoryID   whereHelperuuid_UUID
	HTTPStatusCode  whereHelperint
	ResponseBody    whereHelpertypes_JSONB
	ResponseHeaders whereHelpertypes_JSONB
}{
	HookHistoryID:   whereHelperuuid_UUID{field: "\"hook_results\".\"hook_history_id\""},
	HTTPStatusCode:  whereHelperint{field: "\"hook_results\".\"http_status_code\""},
	ResponseBody:    whereHelpertypes_JSONB{field: "\"hook_results\".\"response_body\""},
	ResponseHeaders: whereHelpertypes_JSONB{field: "\"hook_results\".\"response_headers\""},
}

// HookResultRels is where relationship names are stored.
var HookResultRels = struct {
	HookHistory string
}{
	HookHistory: "HookHistory",
}

// hookResultR is where relationships are stored.
type hookResultR struct {
	HookHistory *HookHistory `boil:"HookHistory" json:"HookHistory" toml:"HookHistory" yaml:"HookHistory"`
}

// NewStruct creates a new relationship struct
func (*hookResultR) NewStruct() *hookResultR {
	return &hookResultR{}
}

func (r *hookResultR) GetHookHistory() *HookHistory {
	if r == nil {
		return nil
	}
	return r.HookHistory
}

// hookResultL is where Load methods for each relationship are stored.
type hookResultL struct{}

var (
	hookResultAllColumns            = []string{"hook_history_id", "http_status_code", "response_body", "response_headers"}
	hookResultColumnsWithoutDefault = []string{"hook_history_id", "http_status_code"}
	hookResultColumnsWithDefault    = []string{"response_body", "response_headers"}
	hookResultPrimaryKeyColumns     = []string{"hook_history_id"}
	hookResultGeneratedColumns      = []string{}
)

type (
	// HookResultSlice is an alias for a slice of pointers to HookResult.
	// This should almost always be used instead of []HookResult.
	HookResultSlice []*HookResult
	// HookResultHook is the signature for custom HookResult hook methods
	HookResultHook func(context.Context, boil.ContextExecutor, *HookResult) error

	hookResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hookResultType                 = reflect.TypeOf(&HookResult{})
	hookResultMapping              = queries.MakeStructMapping(hookResultType)
	hookResultPrimaryKeyMapping, _ = queries.BindMapping(hookResultType, hookResultMapping, hookResultPrimaryKeyColumns)
	hookResultInsertCacheMut       sync.RWMutex
	hookResultInsertCache          = make(map[string]insertCache)
	hookResultUpdateCacheMut       sync.RWMutex
	hookResultUpdateCache          = make(map[string]updateCache)
	hookResultUpsertCacheMut       sync.RWMutex
	hookResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hookResultAfterSelectMu sync.Mutex
var hookResultAfterSelectHooks []HookResultHook

var hookResultBeforeInsertMu sync.Mutex
var hookResultBeforeInsertHooks []HookResultHook
var hookResultAfterInsertMu sync.Mutex
var hookResultAfterInsertHooks []HookResultHook

var hookResultBeforeUpdateMu sync.Mutex
var hookResultBeforeUpdateHooks []HookResultHook
var hookResultAfterUpdateMu sync.Mutex
var hookResultAfterUpdateHooks []HookResultHook

var hookResultBeforeDeleteMu sync.Mutex
var hookResultBeforeDeleteHooks []HookResultHook
var hookResultAfterDeleteMu sync.Mutex
var hookResultAfterDeleteHooks []HookResultHook

var hookResultBeforeUpsertMu sync.Mutex
var hookResultBeforeUpsertHooks []HookResultHook
var hookResultAfterUpsertMu sync.Mutex
var hookResultAfterUpsertHooks []HookResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HookResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HookResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HookResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HookResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HookResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HookResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HookResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HookResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HookResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hookResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHookResultHook registers your hook function for all future operations.
func AddHookResultHook(hookPoint boil.HookPoint, hookResultHook HookResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hookResultAfterSelectMu.Lock()
		hookResultAfterSelectHooks = append(hookResultAfterSelectHooks, hookResultHook)
		hookResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		hookResultBeforeInsertMu.Lock()
		hookResultBeforeInsertHooks = append(hookResultBeforeInsertHooks, hookResultHook)
		hookResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		hookResultAfterInsertMu.Lock()
		hookResultAfterInsertHooks = append(hookResultAfterInsertHooks, hookResultHook)
		hookResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		hookResultBeforeUpdateMu.Lock()
		hookResultBeforeUpdateHooks = append(hookResultBeforeUpdateHooks, hookResultHook)
		hookResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		hookResultAfterUpdateMu.Lock()
		hookResultAfterUpdateHooks = append(hookResultAfterUpdateHooks, hookResultHook)
		hookResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		hookResultBeforeDeleteMu.Lock()
		hookResultBeforeDeleteHooks = append(hookResultBeforeDeleteHooks, hookResultHook)
		hookResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		hookResultAfterDeleteMu.Lock()
		hookResultAfterDeleteHooks = append(hookResultAfterDeleteHooks, hookResultHook)
		hookResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		hookResultBeforeUpsertMu.Lock()
		hookResultBeforeUpsertHooks = append(hookResultBeforeUpsertHooks, hookResultHook)
		hookResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		hookResultAfterUpsertMu.Lock()
		hookResultAfterUpsertHooks = append(hookResultAfterUpsertHooks, hookResultHook)
		hookResultAfterUpsertMu.Unlock()
	}
}

// One returns a single hookResult record from the query.
func (q hookResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HookResult, error) {
	o := &HookResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hook_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HookResult records from the query.
func (q hookResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (HookResultSlice, error) {
	var o []*HookResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HookResult slice")
	}

	if len(hookResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HookResult records in the query.
func (q hookResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hook_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hookResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hook_results exists")
	}

	return count > 0, nil
}

// HookHistory pointed to by the foreign key.
func (o *HookResult) HookHistory(mods ...qm.QueryMod) hookHistoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"hook_history_id\" = ?", o.HookHistoryID),
	}

	queryMods = append(queryMods, mods...)

	return HookHistories(queryMods...)
}

// LoadHookHistory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hookResultL) LoadHookHistory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHookResult interface{}, mods queries.Applicator) error {
	var slice []*HookResult
	var object *HookResult

	if singular {
		var ok bool
		object, ok = maybeHookResult.(*HookResult)
		if !ok {
			object = new(HookResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHookResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHookResult))
			}
		}
	} else {
		s, ok := maybeHookResult.(*[]*HookResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHookResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHookResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hookResultR{}
		}
		if !queries.IsNil(object.HookHistoryID) {
			args[object.HookHistoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hookResultR{}
			}

			if !queries.IsNil(obj.HookHistoryID) {
				args[obj.HookHistoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`hook_histories`),
		qm.WhereIn(`hook_histories.hook_history_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HookHistory")
	}

	var resultSlice []*HookHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HookHistory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hook_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hook_histories")
	}

	if len(hookHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HookHistory = foreign
		if foreign.R == nil {
			foreign.R = &hookHistoryR{}
		}
		foreign.R.HookResult = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HookHistoryID, foreign.HookHistoryID) {
				local.R.HookHistory = foreign
				if foreign.R == nil {
					foreign.R = &hookHistoryR{}
				}
				foreign.R.HookResult = local
				break
			}
		}
	}

	return nil
}

// SetHookHistory of the hookResult to the related item.
// Sets o.R.HookHistory to related.
// Adds o to related.R.HookResult.
func (o *HookResult) SetHookHistory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HookHistory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hook_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hook_history_id"}),
		strmangle.WhereClause("\"", "\"", 2, hookResultPrimaryKeyColumns),
	)
	values := []interface{}{related.HookHistoryID, o.HookHistoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HookHistoryID, related.HookHistoryID)
	if o.R == nil {
		o.R = &hookResultR{
			HookHistory: related,
		}
	} else {
		o.R.HookHistory = related
	}

	if related.R == nil {
		related.R = &hookHistoryR{
			HookResult: o,
		}
	} else {
		related.R.HookResult = o
	}

	return nil
}

// HookResults retrieves all the records using an executor.
func HookResults(mods ...qm.QueryMod) hookResultQuery {
	mods = append(mods, qm.From("\"hook_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hook_results\".*"})
	}

	return hookResultQuery{q}
}

// FindHookResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHookResult(ctx context.Context, exec boil.ContextExecutor, hookHistoryID uuid.UUID, selectCols ...string) (*HookResult, error) {
	hookResultObj := &HookResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hook_results\" where \"hook_history_id\"=$1", sel,
	)

	q := queries.Raw(query, hookHistoryID)

	err := q.Bind(ctx, exec, hookResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hook_results")
	}

	if err = hookResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hookResultObj, err
	}

	return hookResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HookResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hook_results provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hookResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hookResultInsertCacheMut.RLock()
	cache, cached := hookResultInsertCache[key]
	hookResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hookResultAllColumns,
			hookResultColumnsWithDefault,
			hookResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hookResultType, hookResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hookResultType, hookResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hook_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hook_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hook_results")
	}

	if !cached {
		hookResultInsertCacheMut.Lock()
		hookResultInsertCache[key] = cache
		hookResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HookResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HookResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hookResultUpdateCacheMut.RLock()
	cache, cached := hookResultUpdateCache[key]
	hookResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hookResultAllColumns,
			hookResultPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hook_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hook_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hookResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hookResultType, hookResultMapping, append(wl, hookResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hook_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hook_results")
	}

	if !cached {
		hookResultUpdateCacheMut.Lock()
		hookResultUpdateCache[key] = cache
		hookResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hookResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hook_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hook_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HookResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hook_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hookResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hookResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hookResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HookResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no hook_results provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hookResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hookResultUpsertCacheMut.RLock()
	cache, cached := hookResultUpsertCache[key]
	hookResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			hookResultAllColumns,
			hookResultColumnsWithDefault,
			hookResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hookResultAllColumns,
			hookResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hook_results, could not build update column list")
		}

		ret := strmangle.SetComplement(hookResultAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(hookResultPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert hook_results, could not build conflict column list")
			}

			conflict = make([]string, len(hookResultPrimaryKeyColumns))
			copy(conflict, hookResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hook_results\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(hookResultType, hookResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hookResultType, hookResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hook_results")
	}

	if !cached {
		hookResultUpsertCacheMut.Lock()
		hookResultUpsertCache[key] = cache
		hookResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HookResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HookResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HookResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hookResultPrimaryKeyMapping)
	sql := "DELETE FROM \"hook_results\" WHERE \"hook_history_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hook_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hook_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hookResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hookResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hook_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hook_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HookResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hookResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hook_results\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, hookResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hookResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hook_results")
	}

	if len(hookResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HookResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHookResult(ctx, exec, o.HookHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HookResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HookResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hookResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hook_results\".* FROM \"hook_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hookResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HookResultSlice")
	}

	*o = slice

	return nil
}

// HookResultExists checks if the HookResult row exists.
func HookResultExists(ctx context.Context, exec boil.ContextExecutor, hookHistoryID uuid.UUID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hook_results\" where \"hook_history_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hookHistoryID)
	}
	row := exec.QueryRowContext(ctx, sql, hookHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hook_results exists")
	}

	return exists, nil
}

// Exists checks if the HookResult row exists.
func (o *HookResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HookResultExists(ctx, exec, o.HookHistoryID)
}
