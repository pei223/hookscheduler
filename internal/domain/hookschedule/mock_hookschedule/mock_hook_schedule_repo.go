// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pei223/hook-scheduler/internal/domain/hookschedule (interfaces: HookScheduleRepoIF)

// Package mock_hookschedule is a generated GoMock package.
package mock_hookschedule

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	hookschedule "github.com/pei223/hook-scheduler/internal/domain/hookschedule"
	models "github.com/pei223/hook-scheduler/internal/models"
	types "github.com/pei223/hook-scheduler/pkg/types"
)

// MockHookScheduleRepoIF is a mock of HookScheduleRepoIF interface.
type MockHookScheduleRepoIF struct {
	ctrl     *gomock.Controller
	recorder *MockHookScheduleRepoIFMockRecorder
}

// MockHookScheduleRepoIFMockRecorder is the mock recorder for MockHookScheduleRepoIF.
type MockHookScheduleRepoIFMockRecorder struct {
	mock *MockHookScheduleRepoIF
}

// NewMockHookScheduleRepoIF creates a new mock instance.
func NewMockHookScheduleRepoIF(ctrl *gomock.Controller) *MockHookScheduleRepoIF {
	mock := &MockHookScheduleRepoIF{ctrl: ctrl}
	mock.recorder = &MockHookScheduleRepoIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookScheduleRepoIF) EXPECT() *MockHookScheduleRepoIFMockRecorder {
	return m.recorder
}

// CreateHookSchedule mocks base method.
func (m *MockHookScheduleRepoIF) CreateHookSchedule(arg0 context.Context, arg1 *sql.Tx, arg2 *hookschedule.HookScheduleCreateParams) (*models.HookSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHookSchedule", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.HookSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHookSchedule indicates an expected call of CreateHookSchedule.
func (mr *MockHookScheduleRepoIFMockRecorder) CreateHookSchedule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHookSchedule", reflect.TypeOf((*MockHookScheduleRepoIF)(nil).CreateHookSchedule), arg0, arg1, arg2)
}

// DeleteHookSchedule mocks base method.
func (m *MockHookScheduleRepoIF) DeleteHookSchedule(arg0 context.Context, arg1 *sql.Tx, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHookSchedule", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHookSchedule indicates an expected call of DeleteHookSchedule.
func (mr *MockHookScheduleRepoIFMockRecorder) DeleteHookSchedule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHookSchedule", reflect.TypeOf((*MockHookScheduleRepoIF)(nil).DeleteHookSchedule), arg0, arg1, arg2)
}

// GetHookSchedule mocks base method.
func (m *MockHookScheduleRepoIF) GetHookSchedule(arg0 context.Context, arg1 *sql.Tx, arg2 uuid.UUID, arg3 bool) (*models.HookSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookSchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.HookSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHookSchedule indicates an expected call of GetHookSchedule.
func (mr *MockHookScheduleRepoIFMockRecorder) GetHookSchedule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookSchedule", reflect.TypeOf((*MockHookScheduleRepoIF)(nil).GetHookSchedule), arg0, arg1, arg2, arg3)
}

// ListHookSchedules mocks base method.
func (m *MockHookScheduleRepoIF) ListHookSchedules(arg0 context.Context, arg1 *sql.Tx, arg2 *types.ListParams, arg3 bool) (models.HookScheduleSlice, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookSchedules", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.HookScheduleSlice)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookSchedules indicates an expected call of ListHookSchedules.
func (mr *MockHookScheduleRepoIFMockRecorder) ListHookSchedules(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookSchedules", reflect.TypeOf((*MockHookScheduleRepoIF)(nil).ListHookSchedules), arg0, arg1, arg2, arg3)
}
