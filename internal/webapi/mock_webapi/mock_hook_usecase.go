// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pei223/hook-scheduler/internal/webapi (interfaces: HookUsecaseIF)

// Package mock_webapi is a generated GoMock package.
package mock_webapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	hook "github.com/pei223/hook-scheduler/internal/domain/hook"
	models "github.com/pei223/hook-scheduler/internal/models"
)

// MockHookUsecaseIF is a mock of HookUsecaseIF interface.
type MockHookUsecaseIF struct {
	ctrl     *gomock.Controller
	recorder *MockHookUsecaseIFMockRecorder
}

// MockHookUsecaseIFMockRecorder is the mock recorder for MockHookUsecaseIF.
type MockHookUsecaseIFMockRecorder struct {
	mock *MockHookUsecaseIF
}

// NewMockHookUsecaseIF creates a new mock instance.
func NewMockHookUsecaseIF(ctrl *gomock.Controller) *MockHookUsecaseIF {
	mock := &MockHookUsecaseIF{ctrl: ctrl}
	mock.recorder = &MockHookUsecaseIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookUsecaseIF) EXPECT() *MockHookUsecaseIFMockRecorder {
	return m.recorder
}

// CreateHook mocks base method.
func (m *MockHookUsecaseIF) CreateHook(arg0 context.Context, arg1 *hook.HookCreateParams) (*models.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", arg0, arg1)
	ret0, _ := ret[0].(*models.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockHookUsecaseIFMockRecorder) CreateHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockHookUsecaseIF)(nil).CreateHook), arg0, arg1)
}

// DeleteHook mocks base method.
func (m *MockHookUsecaseIF) DeleteHook(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockHookUsecaseIFMockRecorder) DeleteHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockHookUsecaseIF)(nil).DeleteHook), arg0, arg1)
}

// GetHook mocks base method.
func (m *MockHookUsecaseIF) GetHook(arg0 context.Context, arg1 uuid.UUID) (*models.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHook", arg0, arg1)
	ret0, _ := ret[0].(*models.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHook indicates an expected call of GetHook.
func (mr *MockHookUsecaseIFMockRecorder) GetHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHook", reflect.TypeOf((*MockHookUsecaseIF)(nil).GetHook), arg0, arg1)
}
