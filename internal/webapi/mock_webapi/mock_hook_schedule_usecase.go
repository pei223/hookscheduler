// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pei223/hook-scheduler/internal/webapi (interfaces: HookScheduleUsecaseIF)

// Package mock_webapi is a generated GoMock package.
package mock_webapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	hookschedule "github.com/pei223/hook-scheduler/internal/domain/hookschedule"
	models "github.com/pei223/hook-scheduler/internal/models"
	types "github.com/pei223/hook-scheduler/pkg/types"
)

// MockHookScheduleUsecaseIF is a mock of HookScheduleUsecaseIF interface.
type MockHookScheduleUsecaseIF struct {
	ctrl     *gomock.Controller
	recorder *MockHookScheduleUsecaseIFMockRecorder
}

// MockHookScheduleUsecaseIFMockRecorder is the mock recorder for MockHookScheduleUsecaseIF.
type MockHookScheduleUsecaseIFMockRecorder struct {
	mock *MockHookScheduleUsecaseIF
}

// NewMockHookScheduleUsecaseIF creates a new mock instance.
func NewMockHookScheduleUsecaseIF(ctrl *gomock.Controller) *MockHookScheduleUsecaseIF {
	mock := &MockHookScheduleUsecaseIF{ctrl: ctrl}
	mock.recorder = &MockHookScheduleUsecaseIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookScheduleUsecaseIF) EXPECT() *MockHookScheduleUsecaseIFMockRecorder {
	return m.recorder
}

// CreateHookSchedule mocks base method.
func (m *MockHookScheduleUsecaseIF) CreateHookSchedule(arg0 context.Context, arg1 *hookschedule.HookScheduleCreateParams) (*models.HookSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHookSchedule", arg0, arg1)
	ret0, _ := ret[0].(*models.HookSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHookSchedule indicates an expected call of CreateHookSchedule.
func (mr *MockHookScheduleUsecaseIFMockRecorder) CreateHookSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHookSchedule", reflect.TypeOf((*MockHookScheduleUsecaseIF)(nil).CreateHookSchedule), arg0, arg1)
}

// DeleteHookSchedule mocks base method.
func (m *MockHookScheduleUsecaseIF) DeleteHookSchedule(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHookSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHookSchedule indicates an expected call of DeleteHookSchedule.
func (mr *MockHookScheduleUsecaseIFMockRecorder) DeleteHookSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHookSchedule", reflect.TypeOf((*MockHookScheduleUsecaseIF)(nil).DeleteHookSchedule), arg0, arg1)
}

// GetHookSchedule mocks base method.
func (m *MockHookScheduleUsecaseIF) GetHookSchedule(arg0 context.Context, arg1 uuid.UUID, arg2 bool) (*models.HookSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHookSchedule", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.HookSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHookSchedule indicates an expected call of GetHookSchedule.
func (mr *MockHookScheduleUsecaseIFMockRecorder) GetHookSchedule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHookSchedule", reflect.TypeOf((*MockHookScheduleUsecaseIF)(nil).GetHookSchedule), arg0, arg1, arg2)
}

// ListHookSchedules mocks base method.
func (m *MockHookScheduleUsecaseIF) ListHookSchedules(arg0 context.Context, arg1 *types.ListParams, arg2 bool) (models.HookScheduleSlice, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookSchedules", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.HookScheduleSlice)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListHookSchedules indicates an expected call of ListHookSchedules.
func (mr *MockHookScheduleUsecaseIFMockRecorder) ListHookSchedules(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookSchedules", reflect.TypeOf((*MockHookScheduleUsecaseIF)(nil).ListHookSchedules), arg0, arg1, arg2)
}
