// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pei223/hook-scheduler/internal/usecase (interfaces: HookExecServiceIF)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/pei223/hook-scheduler/internal/models"
)

// MockHookExecServiceIF is a mock of HookExecServiceIF interface.
type MockHookExecServiceIF struct {
	ctrl     *gomock.Controller
	recorder *MockHookExecServiceIFMockRecorder
}

// MockHookExecServiceIFMockRecorder is the mock recorder for MockHookExecServiceIF.
type MockHookExecServiceIFMockRecorder struct {
	mock *MockHookExecServiceIF
}

// NewMockHookExecServiceIF creates a new mock instance.
func NewMockHookExecServiceIF(ctrl *gomock.Controller) *MockHookExecServiceIF {
	mock := &MockHookExecServiceIF{ctrl: ctrl}
	mock.recorder = &MockHookExecServiceIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookExecServiceIF) EXPECT() *MockHookExecServiceIFMockRecorder {
	return m.recorder
}

// ExecHookInTx mocks base method.
func (m *MockHookExecServiceIF) ExecHookInTx(arg0 context.Context, arg1 *sql.Tx, arg2 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecHookInTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecHookInTx indicates an expected call of ExecHookInTx.
func (mr *MockHookExecServiceIFMockRecorder) ExecHookInTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecHookInTx", reflect.TypeOf((*MockHookExecServiceIF)(nil).ExecHookInTx), arg0, arg1, arg2)
}

// GetAllHooks mocks base method.
func (m *MockHookExecServiceIF) GetAllHooks(arg0 context.Context, arg1, arg2 int) (models.HookSlice, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHooks", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.HookSlice)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllHooks indicates an expected call of GetAllHooks.
func (mr *MockHookExecServiceIFMockRecorder) GetAllHooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHooks", reflect.TypeOf((*MockHookExecServiceIF)(nil).GetAllHooks), arg0, arg1, arg2)
}
